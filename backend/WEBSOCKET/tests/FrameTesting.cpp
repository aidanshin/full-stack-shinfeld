#include <iostream>

#include "WebSocketFrame.hpp"


int main() {

    std::vector<uint8_t> frame = {
        0x81, 0xbb, 0x0a, 0x8d, 0x95, 0xab, 0x42, 0xe8, 0xf9, 0xc7,
        0x65, 0xa1, 0xb5, 0xdf, 0x62, 0xe4, 0xe6, 0x8b, 0x63, 0xfe,
        0xb5, 0xdf, 0x62, 0xe8, 0xb5, 0xd9, 0x6f, 0xec, 0xf6, 0xdf,
        0x2a, 0xfe, 0xf0, 0xd9, 0x7c, 0xe8, 0xe7, 0x8b, 0x6b, 0xe3,
        0xf1, 0x8b, 0x43, 0xad, 0xe2, 0xc4, 0x7f, 0xe1, 0xf1, 0x8b,
        0x66, 0xe4, 0xfe, 0xce, 0x2a, 0xf9, 0xfa, 0x8b, 0x69, 0xe2,
        0xfb, 0xc5, 0x6f, 0xee, 0xe1
    };

    std::vector<uint8_t> frame1 = {
        0x81, 0xbb, 0xd0, 0xd2, 0x39, 0x87, 0x98, 0xb7, 0x55, 0xeb,
        0xbf, 0xfe, 0x19, 0xf3, 0xb8, 0xbb, 0x4a, 0xa7, 0xb9, 0xa1,
        0x19, 0xf3, 0xb8, 0xb7, 0x19, 0xf5, 0xb5, 0xb3, 0x5a, 0xf3,
        0xf0, 0xa1, 0x5c, 0xf5, 0xa6, 0xb7, 0x4b, 0xa7, 0xb1, 0xbc,
        0x5d, 0xa7, 0x99, 0xf2, 0x4e, 0xe8, 0xa5, 0xbe, 0x5d, 0xa7,
        0xbc, 0xbb, 0x52, 0xe2, 0xf0, 0xa6, 0x56, 0xa7, 0xb3, 0xbd,
        0x57, 0xe9, 0xb5, 0xb1, 0x4d
    };

    std::unique_ptr<WebSocketFrame> decode_frame = WebSocketFrame::decodeFrame(frame);
    std::unique_ptr<WebSocketFrame> decode_frame1 = WebSocketFrame::decodeFrame(frame1);

    if(decode_frame) {
        for (uint8_t c : decode_frame->getPayload()) {
            std::cout << c;
        }
        std::cout << std::endl;
    }

    if(decode_frame1) {
        for (uint8_t c : decode_frame1->getPayload()) {
            std::cout << c;
        }
        std::cout << std::endl;
    }

    std::vector<uint8_t> frame_encoded = decode_frame->encodeFrame();
    std::vector<uint8_t> frame_encoded1 = decode_frame1->encodeFrame();

    if(frame_encoded == frame) {
        std::cout << "ENCODING VALID - FRAME" << std::endl;
    }
    if(frame_encoded1 == frame1) {
        std::cout << "ENCODING VALID - FRAME" << std::endl;
    }

    for(size_t i = 0; i < frame_encoded.size(); ++i) {
        std::cout << std::hex << (int)frame_encoded[i] << " ";
    }
    std::cout << std::endl;

    decode_frame->removeMask();
    std::vector<uint8_t> unmask_frame = decode_frame->encodeFrame();

    for(size_t i = 0; i < unmask_frame.size(); ++i) {
        std::cout << unmask_frame[i];
    }
    std::cout << std::endl;
    
    return 0;
}